[main]
# SecurityManager接口继承了Authenticator，另外还有一个ModularRealmAuthenticator实现，
# 其委托给多个Realm进行验证，验证规则通过AuthenticationStrategy接口指定
# FirstSuccessfulStrategy：只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略；
# AtLeastOneSuccessfulStrategy：只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，
# 返回所有Realm身份验证成功的认证信息；
# AllSuccessfulStrategy：所有Realm验证成功才算成功，且返回所有Realm身份验证成功的认证信息，如果有一个失败就失败了。
# ModularRealmAuthenticator默认使用AtLeastOneSuccessfulStrategy策略。
#
authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator  
securityManager.authenticator=$authenticator  
  
atLeastOneSuccessfulStrategy=org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy  
securityManager.authenticator.authenticationStrategy=$atLeastOneSuccessfulStrategy 


#securityManager会按照realms指定的顺序进行身份认证。此处我们使用显示指定顺序的方式指定了Realm的顺序，
#如果删除“securityManager.realms=$myRealm1,$myRealm2”，那么securityManager会按照realm声明
#的顺序进行使用（即无需设置realms属性，其会自动发现），当我们显示指定realm后，其他没有指定realm将被忽略，
#如“securityManager.realms=$myRealm1”，那么myRealm2不会被自动设置进去。
#
realm1=ggauth.shiro.user.realm.MyRealm1
realm2=ggauth.shiro.user.realm.MyRealm2
realm3=ggauth.shiro.user.realm.MyRealm3

securityManager.realms=$realm1,$realm2,$realm3
